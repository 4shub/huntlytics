{
  "name": "mongojs",
  "description": "Easy to use module that implements the mongo api",
  "keywords": [
    "mongo",
    "db",
    "mongodb"
  ],
  "version": "0.14.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/mafintosh/mongojs.git"
  },
  "author": {
    "name": "Mathias Buus Madsen",
    "email": "mathiasbuus@gmail.com"
  },
  "contributors": [
    {
      "name": "Mathias Buus Madsen",
      "email": "mathiasbuus@gmail.com"
    },
    {
      "name": "Ian Jorgensen"
    },
    {
      "name": "Eduardo Sorribas"
    },
    {
      "name": "Taeho Kim"
    },
    {
      "name": "Forbes Lindesay"
    },
    {
      "name": "Robert S."
    },
    {
      "name": "Srirangan"
    },
    {
      "name": "Erkan Yilmaz"
    },
    {
      "name": "Jake Maskiewicz"
    },
    {
      "name": "Bjarke Walling"
    },
    {
      "name": "Tobias Baunb√¶k"
    },
    {
      "name": "Benedikt Arnold"
    },
    {
      "name": "Kevin McTigue"
    }
  ],
  "dependencies": {
    "thunky": "~0.1.0",
    "readable-stream": "~1.1.9",
    "mongodb": "1.4.9"
  },
  "scripts": {
    "test": "tape test/test-*.js; echo \"Harmony tests\"; node --harmony node_modules/tape/bin/tape test/test-*.js"
  },
  "devDependencies": {
    "each-series": "^0.2.0",
    "tape": "^2.13.4"
  },
  "readme": "# mongojs\n\nA [node.js](http://nodejs.org) module for mongodb, that emulates [the official mongodb API](http://www.mongodb.org/display/DOCS/Home) as much as possible.\nIt wraps [mongodb-native](https://github.com/mongodb/node-mongodb-native/) and is available through [npm](http://npmjs.org)\n\n\tnpm install mongojs\n\n[![build status](https://secure.travis-ci.org/mafintosh/mongojs.png)](http://travis-ci.org/mafintosh/mongojs)\n\n## Usage\n\nmongojs is easy to use:\n\n``` js\nvar mongojs = require('mongojs');\nvar db = mongojs(connectionString, [collections]);\n```\n\nThe connection string should follow the format described in [the mongo connection string docs](http://docs.mongodb.org/manual/reference/connection-string/).\nSome examples of this could be:\n\n``` js\n// simple usage for a local db\nvar db = mongojs('mydb', ['mycollection']);\n\n// the db is on a remote server (the port default to mongo)\nvar db = mongojs('example.com/mydb', ['mycollection']);\n\n// we can also provide some credentials\nvar db = mongojs('username:password@example.com/mydb', ['mycollection']);\n\n// connect now, and worry about collections later\nvar db = mongojs('mydb');\nvar mycollection = db.collection('mycollection');\n```\n\nAfter we connected we can query or update the database just how we would using the mongo API with the exception that we use a callback.\nThe format for callbacks is always `callback(error, value)` where error is null if no exception has occured. The update methods `save`, `remove`, `update` and `findAndModify` also pass the `lastErrorObject` as the last argument to the callback function.\n\n``` js\n// find everything\ndb.mycollection.find(function(err, docs) {\n\t// docs is an array of all the documents in mycollection\n});\n\n// find everything, but sort by name\ndb.mycollection.find().sort({name:1}, function(err, docs) {\n\t// docs is now a sorted array\n});\n\n// iterate over all whose level is greater than 90.\ndb.mycollection.find({level:{$gt:90}}).forEach(function(err, doc) {\n\tif (!doc) {\n\t\t// we visited all docs in the collection\n\t\treturn;\n\t}\n\t// doc is a document in the collection\n});\n\n// find a document using a native ObjectId\ndb.mycollection.findOne({\n\t_id:mongojs.ObjectId('523209c4561c640000000001')\n}, function(err, doc) {\n\t// doc._id.toString() === '523209c4561c640000000001'\n});\n\n// find all named 'mathias' and increment their level\ndb.mycollection.update({name:'mathias'}, {$inc:{level:1}}, {multi:true}, function() {\n\t// the update is complete\n});\n\n// find one named 'mathias', tag him as a contributor and return the modified doc\ndb.mycollection.findAndModify({\n\tquery: { name: 'mathias' },\n\tupdate: { $set: { tag:'maintainer' } },\n\tnew: true\n}, function(err, doc, lastErrorObject) {\n\t// doc.tag === 'maintainer'\n});\n\n\n// use the save function to just save a document (callback is optional for all writes)\ndb.mycollection.save({created:'just now'});\n\n```\n\nIf you provide a callback to `find` or any cursor config operation mongojs will call `toArray` for you\n\n``` js\ndb.mycollection.find({}, function(err, docs) { ... });\n\ndb.mycollection.find({}).limit(2).skip(1, function(err, docs) { ... });\n```\nis the same as\n\n``` js\ndb.mycollection.find({}).toArray(function(err, docs) { ... });\n\ndb.mycollection.find({}).limit(2).skip(1).toArray(function(err, docs) { ... });\n```\n\nFor more detailed information about the different usages of update and querying see [the mongo docs](http://www.mongodb.org/display/DOCS/Manual)\n\n## Streaming cursors\n\nAs of `0.7.0` all cursors are a [readable stream](http://nodejs.org/api/stream.html#stream_readable_stream) of objects.\n\n``` js\nvar JSONStream = require('JSONStream');\n\n// pipe all documents in mycollection to stdout\ndb.mycollection.find({}).pipe(JSONStream.stringify()).pipe(process.stdout);\n```\n\nNotice that you should pipe the cursor through a stringifier (like [JSONStream](https://github.com/dominictarr/JSONStream))\nif you want to pipe it to a serial stream like a http response.\n\n## Tailable cursors\n\nIf you are using a capped collection you can create a [tailable cursor](http://docs.mongodb.org/manual/tutorial/create-tailable-cursor/) to that collection by adding `tailable:true` to the find options\n\n``` js\nvar cursor = db.mycollection.find({}, {}, {tailable:true, timeout:false});\n\n// since all cursors are streams we can just listen for data\ncursor.on('data', function(doc) {\n\tconsole.log('new document', doc);\n});\n```\n\nNote that you need to explicitly set the selection parameter in the `find` call.\n\n## Database commands\n\nWith mongojs you can run database commands just like with the mongo shell using `db.runCommand()`\n\n```js\ndb.runCommand({ping:1}, function(err, res) {\n\tif(!err && res.ok) console.log(\"we're up\");\n});\n```\n\nor `db.collection.runCommand()`\n\n```js\ndb.things.runCommand('count', function(err, res) {\n\tconsole.log(res);\n});\n```\n\n## Replication Sets\n\nMongojs can also connect to a mongo replication set by providing a connection string with multiple hosts\n\n``` js\nvar db = mongojs('rs-1.com,rs-2.com,rs-3.com/mydb?slaveOk=true', ['mycollection']);\n```\n\nFor more detailed information about replica sets see [the mongo replication docs](http://www.mongodb.org/display/DOCS/Replica+Sets)\n\n## Using harmony features\n\nIf you run node.js with the `--harmony` option, then you can ommit the collection names array, and you can do stuff like.\n\n```js\nvar mongojs = require('mongojs');\nvar db = require('mydb');\n\ndb.hackers.insert({name: 'Ed'});\n```\n\nIn the above example the `hackers` collection is enabled automagically (similar to the shell) using the `Proxy` feature in harmony\n\n## Passing a DB to the constructor\n\nIf you have an instance of the mongodb native driver, you can pass this to the constructor and mongojs will\nuse this instance of the driver internally. This can be useful to write modules that use mongojs without\nrequiring and additional connection.\n\n```js\nvar mongodb = require('mongodb');\nvar mongojs = require('mongojs');\n\nmongodb.Db.connect('mongodb://localhost/test', function(err, theDb) {\n    var db = mongojs(theDb, ['myCollection']);\n});\n```\n\nIt can also be used to use a different version of the driver than the one mongojs has installed, but do this\nat your own risk.\n\nYou can also do the same passing a mongojs instance instead.\n\n# API\n\nThis API documentation is a work in progress.\n\n#### Collection\n\n#####`db.collection.aggregate([pipeline], [callback])`\n\n#####`db.collection.count([query], callback)`\n\n#####`db.collection.createIndex(keys, options, [callback])`\n\n#####`db.collection.distinct(field, query, callback)`\n\n#####`db.collection.drop([callback])`\n\n#####`db.collection.dropIndex(index, [callback])`\n\n#####`db.collection.dropIndexes([callback])`\n\n#####`db.collection.ensureIndex(keys, options, [callback])`\n\n#####`db.collection.find([criteria], [projection], [callback])`\n\nThis function applies a query to a collection. You can get the return value, which is a cursor, or pass a callback\nas the last parameter. Said callback receives `(err, documents)`\n\n#####`db.collection.findOne([criteria], [projection], callback)`\n\nApply a query and get one single document passed as a callback. The callback receives `(err, document)`\n\n#####`db.collection.findAndModify(document, callback)`\n\n#####`db.collection.getIndexes(callback)`\n\n#####`db.collection.group(document, callback)`\n\n#####`db.collection.insert(docOrDocs, [callback])`\n\n#####`db.collection.isCapped(callback)`\n\n#####`db.collection.mapReduce(map, reduce, options, [callback])`\n\n#####`db.collection.reIndex([callback])`\n\n#####`db.collection.remove(query, [justOne], [callback])`\n\n#####`db.collection.runCommand(command, [callback])`\n\n#####`db.collection.save(doc, [callback])`\n\n#####`db.collection.stats(callback)`\n\n#####`db.collection.update(query, update, [options], [callback])`\n\n#### Cursor\n\n#####`cursor.batchSize(size, [callback])`\n\n#####`cursor.count(callback)`\n\n#####`cursor.explain(callback)`\n\n#####`cursor.forEach(function)`\n\n#####`cursor.limit(n, [callback])`\n\n#####`cursor.map(function, [callback])`\n\n#####`cursor.next(callback)`\n\n#####`cursor.skip(n, [callback])`\n\n#####`cursor.sort(sortOptions, [callback])`\n\n#####`cursor.toArray(callback)`\n\n#####`cursor.rewind()`\n\n#####`cursor.destroy()`\n\n#### Database\n\n#####`db.addUser(document)`\n\n#####`db.createCollection(name, options, [callback])`\n\n#####`db.dropDatabase([callback])`\n\n#####`db.eval(code, [params], [options], [callback])`\n\n#####`db.getCollectionNames(callback)`\n\n#####`db.getLastError(callback)`\n\n#####`db.getLastErrorObj(callback)`\n\n#####`db.removeUser(username, [callback])`\n\n#####`db.runCommand(command, [callback])`\n\n#####`db.stats([callback])`\n\n#####`db.close()`\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mafintosh/mongojs/issues"
  },
  "_id": "mongojs@0.14.1",
  "dist": {
    "shasum": "9dc0f1f6ad4a5dd1930d6cdf26470e3aa6e6ce35"
  },
  "_from": "mongojs@",
  "_resolved": "https://registry.npmjs.org/mongojs/-/mongojs-0.14.1.tgz"
}
